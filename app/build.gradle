

apply plugin: 'android'

def getDefinedVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-n', '1', '--pretty=format:"%H"'
        standardOutput = stdout
    }
    return stdout.toString().trim().replace("\"","")
}

def getVersionCode = { ->

    def code = Math.round(new Date().getTime()/1000).toInteger()
    println "VersionCode is set to $code"
    return code
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
        versionCode getVersionCode()
        versionName getDefinedVersionName()
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    android {
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest.setRoot('tests')
    }

    packagingOptions {
        exclude 'META-INF/LICENCE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets.main.jni.srcDirs = []
}

dependencies {
    compile project(':listviewanimations')
    compile project(':sliderpreference')
    compile project(':actionbarsherlock')
    compile project(':slidingmenu')
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
